#!/usr/bin/env bash
#
# bashsupport disable=BP5006,BP5007
#
# index:
#   - _config_aks
#   - _config_aks_set_context
#   - _config_aks_use_context
#   - _config_custom
#   - _config_custom_set_context
#   - _config_custom_use_context
#   - _extension_aptakube
#   - _help
#   - _print_default_kubeconfig
#

if [ -f "$(dirname "${0}")"/../etc/bash44.shconf ]; then
  # shellcheck source=../etc/bash44.shconf
  . "$(dirname "${0}")"/../etc/bash44.shconf || exit 1
else
  # shellcheck source=/dev/null
  . "${HOME:?}"/.etc/bash44.shconf || exit 1
fi

if [ -f "$(dirname "${0}")"/../etc/constants.shconf ]; then
  # shellcheck source=../etc/constants.shconf
  . "$(dirname "${0}")"/../etc/constants.shconf
else
  # shellcheck source=/dev/null
  . "${HOME:?}"/.etc/constants.shconf
fi

if [ -f "$(dirname "${0}")"/../etc/functions.shconf ]; then
  # shellcheck source=../etc/functions.shconf
  . "$(dirname "${0}")"/../etc/functions.shconf
else
  # shellcheck source=/dev/null
  . "${HOME:?}"/.etc/functions.shconf
fi

case "$(uname)" in
  Darwin*)
    sed='gsed'
    ;;
  *)
    sed='sed'
    ;;
esac

OCC_CONF="${OCC_CONF:-"${HOME:?}"/.occ.conf}"

default_namespace='default'

#######################################
# No description.
# Globals:
#   admin
# Arguments:
#   1
#   2
#   3
#   4
#######################################
_config_aks() {
  # INFO : local variables with "local" prefix to avoid "collisions"...
  local local_current_kubeconfig
  local local_current_aks_name
  local local_current_aks_resource_group
  local local_current_aks_subscription
  local_current_kubeconfig="${1:?}"
  local_current_aks_name="${2:?}"
  local_current_aks_resource_group="${3:?}"
  local_current_aks_subscription="${4:?}"
  if [ "${admin:-}" = 'true' ]; then
    az aks get-credentials \
      --admin \
      --context "${local_current_aks_name}" \
      --file "${local_current_kubeconfig}" \
      --name "${local_current_aks_name}" \
      --overwrite-existing \
      --resource-group "${local_current_aks_resource_group}" \
      --subscription "${local_current_aks_subscription}" 1> /dev/null
  else
    az aks get-credentials \
      --context "${local_current_aks_name}" \
      --file "${local_current_kubeconfig}" \
      --name "${local_current_aks_name}" \
      --overwrite-existing \
      --resource-group "${local_current_aks_resource_group}" \
      --subscription "${local_current_aks_subscription}" 1> /dev/null
  fi
}

#######################################
# No description.
# Globals:
#   admin
#   default_namespace
#   namespace
# Arguments:
#   1
#   2
#######################################
_config_aks_set_context() {
  # INFO : local variables with "local" prefix to avoid "collisions"...
  local local_current_kubeconfig
  local local_current_aks_name
  local_current_kubeconfig="${1:?}"
  local_current_aks_name="${2:?}"
  if [ "${admin:-}" = 'true' ]; then
    oc config set-context \
      --kubeconfig="${local_current_kubeconfig}" \
      --namespace="${namespace:-"${default_namespace}"}" \
      "${local_current_aks_name}"-admin 1> /dev/null
  else
    oc config set-context \
      --kubeconfig="${local_current_kubeconfig}" \
      --namespace="${namespace:-"${default_namespace}"}" \
      "${local_current_aks_name}" 1> /dev/null
  fi
}

#######################################
# No description.
# Globals:
#   admin
# Arguments:
#   1
#######################################
_config_aks_use_context() {
  # INFO : local variables with "local" prefix to avoid "collisions"...
  local local_current_aks_name
  local_current_aks_name="${1:?}"
  if [ "${admin:-}" = 'true' ]; then
    oc config use-context \
      "${local_current_aks_name}"-admin
  else
    oc config use-context \
      "${local_current_aks_name}"
  fi
}

#######################################
# No description.
# Globals:
#   token
# Arguments:
#   1
#   2
#   3
#   4
#######################################
_config_custom() {
  # INFO : local variables with "local" prefix to avoid "collisions"...
  local local_current_kubeconfig
  local local_current_cluster_api_url
  local local_current_cluster_name
  local local_current_user_name
  local_current_kubeconfig="${1:?}"
  local_current_cluster_api_url="${2:?}"
  local_current_cluster_name="${3:?}"
  local_current_user_name="${4:?}"
  oc config set-cluster \
    --kubeconfig="${local_current_kubeconfig}" \
    --server="${local_current_cluster_api_url}" \
    "${local_current_cluster_name}" 1> /dev/null
  oc config set-context \
    --cluster="${local_current_cluster_name}" \
    --kubeconfig="${local_current_kubeconfig}" \
    --user="${local_current_user_name}-at-${local_current_cluster_name}" \
    "${local_current_cluster_name}-as-${local_current_user_name}" 1> /dev/null
  if [ -n "${token:-}" ]; then
    oc config set-credentials \
      --kubeconfig="${local_current_kubeconfig}" \
      --token="${token}" \
      "${local_current_user_name}-at-${local_current_cluster_name}" 1> /dev/null
  fi
}

#######################################
# No description.
# Globals:
#   default_namespace
#   namespace
# Arguments:
#   1
#   2
#   3
#######################################
_config_custom_set_context() {
  # INFO : local variables with "local" prefix to avoid "collisions"...
  local local_current_kubeconfig
  local local_current_cluster_name
  local local_current_user_name
  local_current_kubeconfig="${1:?}"
  local_current_cluster_name="${2:?}"
  local_current_user_name="${3:?}"
  oc config set-context \
    --kubeconfig="${local_current_kubeconfig}" \
    --namespace="${namespace:-"${default_namespace}"}" \
    "${local_current_cluster_name}-as-${local_current_user_name}" 1> /dev/null
}

#######################################
# No description.
# Arguments:
#   1
#   2
#######################################
_config_custom_use_context() {
  # INFO : local variables with "local" prefix to avoid "collisions"...
  local local_current_cluster_name
  local local_current_user_name
  local_current_cluster_name="${1:?}"
  local_current_user_name="${2:?}"
  oc config use-context \
    "${local_current_cluster_name}-as-${local_current_user_name}"
}

#######################################
# No description.
# Arguments:
#   1
#   2
#   3
#   4
#   5
#######################################
_extension_aptakube() {
  local cluster_name
  local tag_index
  cluster_name="${2:?}"
  tag_index=''
  # INFO : local variables with "local" prefix to avoid "collisions"...
  local local_current_kubeconfig
  local local_current_extension_aptakube_icon_url
  local local_current_extension_aptakube_order
  local local_current_extension_aptakube_tags
  local local_current_extension_aptakube_tags_array
  local_current_kubeconfig="${1:?}"
  local_current_extension_aptakube_icon_url="${3:-}"
  local_current_extension_aptakube_order="${4:-}"
  local_current_extension_aptakube_tags="${5:-}"
  local_current_extension_aptakube_tags_array=()
  yq --inplace \
    "(.contexts[].context | select(.cluster == \"${cluster_name}\") | .extensions[0].name) = \"aptakube\"" \
    "${local_current_kubeconfig}"
  # extension_aptakube_icon_url
  #
  yq --inplace \
    "del(.contexts[].context | select(.cluster == \"${cluster_name}\") | .extensions[0].extension.icon-url)" \
    "${local_current_kubeconfig}"
  if [ -n "${local_current_extension_aptakube_icon_url}" ]; then
    yq --inplace \
      "(.contexts[].context | select(.cluster == \"${cluster_name}\") | .extensions[0].extension.icon-url) = \"${local_current_extension_aptakube_icon_url}\"" \
      "${local_current_kubeconfig}"
  fi
  # extension_aptakube_order
  #
  yq --inplace \
    "del(.contexts[].context | select(.cluster == \"${cluster_name}\") | .extensions[0].extension.order)" \
    "${local_current_kubeconfig}"
  if [ -n "${local_current_extension_aptakube_order}" ]; then
    yq --inplace \
      "(.contexts[].context | select(.cluster == \"${cluster_name}\") | .extensions[0].extension.order) = ${local_current_extension_aptakube_order}" \
      "${local_current_kubeconfig}"
  fi
  # extension_aptakube_tags
  #
  yq --inplace \
    "del(.contexts[].context | select(.cluster == \"${cluster_name}\") | .extensions[0].extension.tags)" \
    "${local_current_kubeconfig}"
  if [ -n "${local_current_extension_aptakube_tags}" ]; then
    IFS=',' read -a local_current_extension_aptakube_tags_array -r <<< "${local_current_extension_aptakube_tags}"
    for tag_index in "${!local_current_extension_aptakube_tags_array[@]}"; do
      yq --inplace \
        "(.contexts[].context | select(.cluster == \"${cluster_name}\") | .extensions[0].extension.tags[${tag_index}]) = \"${local_current_extension_aptakube_tags_array[tag_index]}\"" \
        "${local_current_kubeconfig}"
    done
  fi
}

#######################################
# No description.
# Arguments:
#   1 - exit code (optional, integer)
# Outputs:
#   Help message to stdout.
#######################################
_help() {
  local exit_code
  exit_code="${1:-1}"
  cat << EOT

  Usage: $(basename "${0}") [OPTION...] <ALIAS>

  Options:
    -a             Configure as (cluster) admin
    -l             List available aliases and exit
    -n <namespace> Set the specified namespace
    -r             Restore default kubeconfig files and exit
    -t <token>     Set the specified token
    -u             Unset current context and exit

  Help options:
    -H Show this help message
    -U Display brief usage
    -V Print version

  Configuration file example:
    [...]
    <alias>_aks_name=<aks1 name>
    <alias>_aks_resource_group=<aks1 resource group>
    <alias>_aks_subscription=<aks1 subscription>
    <alias>_extension_aptakube_order=3
    <alias>_extension_aptakube_tags=AZ,AKS
    <alias>_kind=aks
    <alias>_kubeconfig=/Users/jobace78/.kubeconfig-aks.yaml

    <alias>_aks_name=<aks2 name>
    <alias>_aks_resource_group=<aks2 resource group>
    <alias>_aks_subscription=<aks2 subscription>
    <alias>_extension_aptakube_order=4
    <alias>_extension_aptakube_tags=AZ,AKS
    <alias>_kind=aks
    <alias>_kubeconfig=/Users/jobace78/.kubeconfig-aks.yaml

    <alias>_cluster_api_url=https://<api address>
    <alias>_cluster_name=<custom1 name>
    <alias>_extension_aptakube_icon_url=/Users/jobace78/icon_openshift_512x512.png
    <alias>_extension_aptakube_order=1
    <alias>_extension_aptakube_tags=AWS,OCP
    <alias>_kind=custom
    <alias>_kubeconfig=/Users/jobace78/.kubeconfig-custom.yaml
    <alias>_user_name=<mail or user name>

    <alias>_cluster_api_url=https://<api address>
    <alias>_cluster_name=<custom2 name>
    <alias>_extension_aptakube_icon_url=/Users/jobace78/icon_openshift_512x512.png
    <alias>_extension_aptakube_order=2
    <alias>_extension_aptakube_tags=AWS,OCP
    <alias>_kind=custom
    <alias>_kubeconfig=/Users/jobace78/.kubeconfig-custom.yaml
    <alias>_user_name=<mail or user name>
    [...]

  Environment variable example:
    [...]
    KUBECONFIG=":/Users/jobace78/.kube/config:/Users/jobace78/.kubeconfig-aks.yaml:/Users/jobace78/.kubeconfig-custom.yaml"
    [...]

EOT
  functions::exit "${exit_code}"
}

#######################################
# No description.
# Arguments:
#   1
#######################################
_print_default_kubeconfig() {
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  cat << 'EOT' > "${path}"
apiVersion: v1
clusters: null
contexts: null
kind: Config
preferences: {}
users: null
EOT
}

trap '_catch_all ${?}' ERR SIGHUP SIGINT SIGQUIT SIGTERM

touch "${HOME:?}"/.kube/config 1> /dev/null

OPTIND=1
while getopts 'aln:rt:uHUV' ARGS; do
  case "${ARGS}" in
    a)
      admin='true'
      ;;
    l)
      if [ -f "${OCC_CONF}" ]; then
        aliases=()
        # aliases (aks)
        #
        while read -r alias; do
          aliases+=("${alias/_aks_name/}")
        done < <(awk -F '=' '$1 ~ /_aks_name/ { print $1 }' "${OCC_CONF}" 2> /dev/null)
        # aliases (custom)
        #
        while read -r alias; do
          aliases+=("${alias/_cluster_name/}")
        done < <(awk -F '=' '$1 ~ /_cluster_name/ { print $1 }' "${OCC_CONF}" 2> /dev/null)
        # aliases
        #
        if [[ "${aliases[*]}" ]]; then
          functions::stdout "${aliases[*]}"
          functions::exit 0
        else
          functions::exit 1 "is '${OCC_CONF}' empty ???"
        fi
      else
        functions::exit 1 "'${OCC_CONF}' was NOT found, exiting."
      fi
      ;;
    n)
      namespace="${OPTARG}"
      ;;
    r)
      if [ -f "${OCC_CONF}" ]; then
        while read -r kubeconfig; do
          if [ -f "${kubeconfig}" ]; then
            functions::stdout "restoring [${kubeconfig}]..."
            _print_default_kubeconfig "${kubeconfig}"
          fi
        done < <(awk -F '=' '$1 ~ /_kubeconfig/ { print $2 }' "${OCC_CONF}" 2> /dev/null)
      fi
      functions::stdout "restoring [${HOME:?}/.kube/config]..."
      _print_default_kubeconfig "${HOME:?}"/.kube/config
      functions::exit 0
      ;;
    t)
      token="${OPTARG}"
      ;;
    u)
      if [ -f "${OCC_CONF}" ]; then
        while read -r kubeconfig; do
          if [ -f "${kubeconfig}" ]; then
            ${sed} -i '/^current-context:/d' "${kubeconfig}"
          fi
        done < <(awk -F '=' '$1 ~ /_kubeconfig/ { print $2 }' "${OCC_CONF}" 2> /dev/null)
      fi
      ${sed} -i '/^current-context:/d' "${HOME:?}"/.kube/config
      functions::exit 0
      ;;
    H | U)
      _help 0
      ;;
    V)
      functions::exit 0 'v20240507'
      ;;
    ?)
      _help 1
      ;;
  esac
done
shift $((OPTIND - 1))

[ $# -ge 1 ] || _help 1

alias="${1:?}"

if [ -f "${OCC_CONF}" ]; then
  # common variables
  #
  current_extension_aptakube_icon_url="$(awk -F '=' -v this="^${alias}_extension_aptakube_icon_url" '$1 ~ this { print $2 }' "${OCC_CONF}" 2> /dev/null)"
  current_extension_aptakube_order="$(awk -F '=' -v this="^${alias}_extension_aptakube_order" '$1 ~ this { print $2 }' "${OCC_CONF}" 2> /dev/null)"
  current_extension_aptakube_tags="$(awk -F '=' -v this="^${alias}_extension_aptakube_tags" '$1 ~ this { print $2 }' "${OCC_CONF}" 2> /dev/null)"
  current_kind="$(awk -F '=' -v this="^${alias}_kind" '$1 ~ this { print $2 }' "${OCC_CONF}" 2> /dev/null)"
  current_kubeconfig="$(awk -F '=' -v this="^${alias}_kubeconfig" '$1 ~ this { print $2 }' "${OCC_CONF}" 2> /dev/null)"
  case "${current_kind:?}" in
    aks)
      # aks variables
      #
      current_aks_name="$(awk -F '=' -v this="^${alias}_aks_name" '$1 ~ this { print $2 }' "${OCC_CONF}" 2> /dev/null)"
      current_aks_resource_group="$(awk -F '=' -v this="^${alias}_aks_resource_group" '$1 ~ this { print $2 }' "${OCC_CONF}" 2> /dev/null)"
      current_aks_subscription="$(awk -F '=' -v this="^${alias}_aks_subscription" '$1 ~ this { print $2 }' "${OCC_CONF}" 2> /dev/null)"
      # aks
      #
      _config_aks \
        "${current_kubeconfig:?}" \
        "${current_aks_name:?}" \
        "${current_aks_resource_group:?}" \
        "${current_aks_subscription:?}"
      _config_aks_set_context \
        "${current_kubeconfig:?}" \
        "${current_aks_name:?}"
      _config_aks_use_context \
        "${current_aks_name:?}"
      _extension_aptakube \
        "${current_kubeconfig:?}" \
        "${current_aks_name:?}" \
        "${current_extension_aptakube_icon_url:-}" \
        "${current_extension_aptakube_order:-}" \
        "${current_extension_aptakube_tags:-}"
      ;;
    custom)
      # custom variables
      #
      current_cluster_api_url="$(awk -F '=' -v this="^${alias}_cluster_api_url" '$1 ~ this { print $2 }' "${OCC_CONF}" 2> /dev/null)"
      current_cluster_name="$(awk -F '=' -v this="^${alias}_cluster_name" '$1 ~ this { print $2 }' "${OCC_CONF}" 2> /dev/null)"
      current_user_name="$(awk -F '=' -v this="^${alias}_user_name" '$1 ~ this { print $2 }' "${OCC_CONF}" 2> /dev/null)"
      # custom
      #
      _config_custom \
        "${current_kubeconfig:?}" \
        "${current_cluster_api_url:?}" \
        "${current_cluster_name:?}" \
        "${current_user_name:?}"
      _config_custom_set_context \
        "${current_kubeconfig:?}" \
        "${current_cluster_name:?}" \
        "${current_user_name:?}"
      _config_custom_use_context \
        "${current_cluster_name:?}" \
        "${current_user_name:?}"
      _extension_aptakube \
        "${current_kubeconfig:?}" \
        "${current_cluster_name:?}" \
        "${current_extension_aptakube_icon_url:-}" \
        "${current_extension_aptakube_order:-}" \
        "${current_extension_aptakube_tags:-}"
      ;;
    *)
      functions::exit 1 'Unsupported kind, exiting.'
      ;;
  esac
else
  functions::exit 1 "'${OCC_CONF}' was NOT found, exiting."
fi
