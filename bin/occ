#!/usr/bin/env bash

# shellcheck source=../etc/bash44.shconf
if [ -f "$(dirname "${0}")"/../etc/bash44.shconf ]; then
  . "$(dirname "${0}")"/../etc/bash44.shconf || exit 1
else
  . "${HOME:?}"/.etc/bash44.shconf || exit 1
fi

# shellcheck source=../etc/constants.shconf
if [ -f "$(dirname "${0}")"/../etc/constants.shconf ]; then
  . "$(dirname "${0}")"/../etc/constants.shconf
else
  . "${HOME:?}"/.etc/constants.shconf
fi

# shellcheck source=../etc/functions.shconf
if [ -f "$(dirname "${0}")"/../etc/functions.shconf ]; then
  . "$(dirname "${0}")"/../etc/functions.shconf
else
  . "${HOME:?}"/.etc/functions.shconf
fi

case "$(uname)" in
  Darwin*)
    sed='gsed'
    ;;
  *)
    sed='sed'
    ;;
esac

_help() {
  local exit_code
  exit_code="${1:-1}"
  cat << EOT

  Usage: $(basename "${0}") [OPTION...] <ALIAS>

  Options:
    -l             List available aliases and exit
    -n <namespace> Set the specified namespace
    -t <token>     Set the specified token
    -u             Unset current context and exit

  Help options:
    -H Show this help message
    -U Display brief usage
    -V Print version

  Configuration file example:
  [...]
  <alias>_aks_name=<aks1 name>
  <alias>_aks_resource_group=<aks1 resource group>
  <alias>_context_name=aks1
  <alias>_kind=aks
  <alias>_kubeconfig=/Users/jobace78/.kubeconfig.yaml

  <alias>_aks_name=<aks2 name>
  <alias>_aks_resource_group=<aks2 resource group>
  <alias>_context_name=aks2
  <alias>_kind=aks
  <alias>_kubeconfig=/Users/jobace78/.kubeconfig.yaml

  <alias>_cluster_api_url=https://<api address>
  <alias>_cluster_name=<api address>
  <alias>_context_name=ocp-on-aws
  <alias>_kind=custom
  <alias>_kubeconfig=/Users/jobace78/.kubeconfig-custom.yaml
  <alias>_user_name=example@example.invalid

  <alias>_cluster_api_url=https://<api address>
  <alias>_cluster_name=<api address>
  <alias>_context_name=ocp-on-az
  <alias>_kind=custom
  <alias>_kubeconfig=/Users/jobace78/.kubeconfig-custom.yaml
  <alias>_user_name=example@example.invalid
  [...]

  Environment variable example:
  [...]
  KUBECONFIG=":/Users/jobace78/.kube/config:/Users/jobace78/.kubeconfig.yaml:/Users/jobace78/.kubeconfig-custom.yaml"
  [...]

EOT
  exit "${exit_code}"
}

trap '_catch_all ${?}' ERR SIGHUP SIGINT SIGQUIT SIGTERM

touch "${HOME:?}"/.kube/config 1> /dev/null

if oc config current-context 1> /dev/null 2> /dev/null; then
  current_context="$(oc config current-context 2> /dev/null)"
fi

OPTIND=1
while getopts 'ln:t:uHUV' ARGS; do
  case "${ARGS}" in
    l)
      if [ -f "${HOME:?}"/.occ.conf ]; then
        aliases=()
        while read -r alias; do
          aliases+=("${alias/_context_name/}")
        done < <(awk -F '=' '$1 ~ /_context_name/ { print $1 }' "${HOME:?}"/.occ.conf 2> /dev/null)
        if [[ "${aliases[*]}" ]]; then
          echo "${aliases[*]}"
          _exit 0
        else
          _exit 1 "is '${HOME:?}/.occ.conf' empty ???"
        fi
      else
        _exit 1 "'${HOME:?}/.occ.conf' was NOT found, exiting."
      fi
      ;;
    n)
      namespace="${OPTARG}"
      ;;
    t)
      token="${OPTARG}"
      ;;
    u)
      if [ -n "${current_context}" ]; then
        #
        # Notes:
        #   - https://github.com/lensapp/lens/issues/7826
        #
        if [ -f "${HOME:?}"/.occ.conf ]; then
          while read -r kubeconfig; do
            ${sed} -i '/^current-context:/d' "${kubeconfig}"
          done < <(awk -F '=' '$1 ~ /_kubeconfig/ { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)
        fi
        oc config unset current-context
        _exit 0
      else
        _exit 1 "current-context is NOT set, exiting."
      fi
      ;;
    H | U)
      _help 0
      ;;
    V)
      _exit 0 'v20231115'
      ;;
    ?)
      _help 1
      ;;
  esac
done
shift $((OPTIND - 1))

[ $# -ge 1 ] || _help 1

if [ -f "${HOME:?}"/.occ.conf ]; then
  # common variables
  #
  current_context_name="$(awk -F '=' -v this="^${1:?}_context_name" '$1 ~ this { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)"
  current_kind="$(awk -F '=' -v this="^${1:?}_kind" '$1 ~ this { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)"
  current_kubeconfig="$(awk -F '=' -v this="^${1:?}_kubeconfig" '$1 ~ this { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)"
  case "${current_kind:?}" in
    aks)
      # aks variables
      #
      current_aks_name="$(awk -F '=' -v this="^${1:?}_aks_name" '$1 ~ this { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)"
      current_aks_resource_group="$(awk -F '=' -v this="^${1:?}_aks_resource_group" '$1 ~ this { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)"
      # aks (set-cluster, set-context, set-credentials)
      #
      az aks get-credentials \
        --context "${current_context_name:?}" \
        --file "${current_kubeconfig:?}" \
        --name "${current_aks_name:?}" \
        --overwrite-existing \
        --resource-group "${current_aks_resource_group:?}" 1> /dev/null
      # aks (set-context, use-context)
      #
      oc config set-context \
        --kubeconfig="${current_kubeconfig:?}" \
        --namespace="${namespace:-default}" \
        "${current_context_name:?}" 1> /dev/null
      oc config use-context \
        "${current_context_name:?}"
      ;;
    custom)
      # custom variables
      #
      current_cluster_api_url="$(awk -F '=' -v this="^${1:?}_cluster_api_url" '$1 ~ this { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)"
      current_cluster_name="$(awk -F '=' -v this="^${1:?}_cluster_name" '$1 ~ this { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)"
      current_user_name="$(awk -F '=' -v this="^${1:?}_user_name" '$1 ~ this { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)"
      # custom (set-cluster, set-context, set-credentials)
      #
      oc config set-cluster \
        --kubeconfig="${current_kubeconfig:?}" \
        --server="${current_cluster_api_url:?}" \
        "${current_cluster_name:?}" 1> /dev/null
      oc config set-context \
        --cluster="${current_cluster_name:?}" \
        --kubeconfig="${current_kubeconfig:?}" \
        --user="${current_user_name:?}-at-${current_context_name:?}" \
        "${current_context_name:?}/${current_user_name:?}" 1> /dev/null
      if [ -n "${token}" ]; then
        oc config set-credentials \
          --kubeconfig="${current_kubeconfig:?}" \
          --token="${token}" \
          "${current_user_name:?}-at-${current_context_name:?}" 1> /dev/null
      fi
      # custom (set-context, use-context)
      #
      oc config set-context \
        --kubeconfig="${current_kubeconfig:?}" \
        --namespace="${namespace:-default}" \
        "${current_context_name:?}/${current_user_name:?}" 1> /dev/null
      oc config use-context \
        "${current_context_name:?}/${current_user_name:?}"
      ;;
    *)
      _exit 1 'Unsupported kind, exiting.'
      ;;
  esac
else
  _exit 1 "'${HOME:?}/.occ.conf' was NOT found, exiting."
fi
