#!/usr/bin/env bash
#
# bashsupport disable=BP5006,BP5007

if [ -f "$(dirname "${0}")"/../etc/bash44.shconf ]; then
  # shellcheck source=../etc/bash44.shconf
  . "$(dirname "${0}")"/../etc/bash44.shconf || exit 1
else
  # shellcheck source=/dev/null
  . "${HOME:?}"/.etc/bash44.shconf || exit 1
fi

if [ -f "$(dirname "${0}")"/../etc/constants.shconf ]; then
  # shellcheck source=../etc/constants.shconf
  . "$(dirname "${0}")"/../etc/constants.shconf
else
  # shellcheck source=/dev/null
  . "${HOME:?}"/.etc/constants.shconf
fi

if [ -f "$(dirname "${0}")"/../etc/functions.shconf ]; then
  # shellcheck source=../etc/functions.shconf
  . "$(dirname "${0}")"/../etc/functions.shconf
else
  # shellcheck source=/dev/null
  . "${HOME:?}"/.etc/functions.shconf
fi

case "$(uname)" in
  Darwin*)
    sed='gsed'
    ;;
  *)
    sed='sed'
    ;;
esac

AKS_GET_CLUSTER_ADMINISTRATOR_CREDENTIALS="${AKS_GET_CLUSTER_ADMINISTRATOR_CREDENTIALS:-false}"

_help() {
  local exit_code
  exit_code="${1:-1}"
  cat << EOT

  Usage: $(basename "${0}") [OPTION...] <ALIAS>

  Options:
    -l             List available aliases and exit
    -n <namespace> Set the specified namespace
    -r             Restore default kubeconfig files and exit
    -t <token>     Set the specified token
    -u             Unset current context and exit

  Help options:
    -H Show this help message
    -U Display brief usage
    -V Print version

  Notes:
    - Set AKS_GET_CLUSTER_ADMINISTRATOR_CREDENTIALS environment variable to overwrite default value, defaults to '${AKS_GET_CLUSTER_ADMINISTRATOR_CREDENTIALS}'

  Configuration file example:
    [...]
    <alias>_aks_name=<aks1 name>
    <alias>_aks_resource_group=<aks1 resource group>
    <alias>_aks_subscription=<aks1 subscription>
    <alias>_kind=aks
    <alias>_kubeconfig=/Users/jobace78/.kubeconfig.yaml

    <alias>_aks_name=<aks2 name>
    <alias>_aks_resource_group=<aks2 resource group>
    <alias>_aks_subscription=<aks2 subscription>
    <alias>_kind=aks
    <alias>_kubeconfig=/Users/jobace78/.kubeconfig.yaml

    <alias>_cluster_api_url=https://<api address>
    <alias>_cluster_name=<custom1 name>
    <alias>_kind=custom
    <alias>_kubeconfig=/Users/jobace78/.kubeconfig-custom.yaml
    <alias>_user_name=<mail or user name>

    <alias>_cluster_api_url=https://<api address>
    <alias>_cluster_name=<custom2 name>
    <alias>_kind=custom
    <alias>_kubeconfig=/Users/jobace78/.kubeconfig-custom.yaml
    <alias>_user_name=<mail or user name>
    [...]

  Environment variable example:
    [...]
    KUBECONFIG=":/Users/jobace78/.kube/config:/Users/jobace78/.kubeconfig.yaml:/Users/jobace78/.kubeconfig-custom.yaml"
    [...]

EOT
  exit "${exit_code}"
}

_print_default_kubeconfig() {
  # INFO : local variables
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  cat << 'EOT' > "${path}"
apiVersion: v1
clusters: null
contexts: null
kind: Config
preferences: {}
users: null
EOT
}

trap '_catch_all ${?}' ERR SIGHUP SIGINT SIGQUIT SIGTERM

touch "${HOME:?}"/.kube/config 1> /dev/null

OPTIND=1
while getopts 'ln:rt:uHUV' ARGS; do
  case "${ARGS}" in
    l)
      if [ -f "${HOME:?}"/.occ.conf ]; then
        aliases=()
        # aliases (aks)
        #
        while read -r alias; do
          aliases+=("${alias/_aks_name/}")
        done < <(awk -F '=' '$1 ~ /_aks_name/ { print $1 }' "${HOME:?}"/.occ.conf 2> /dev/null)
        # aliases (custom)
        #
        while read -r alias; do
          aliases+=("${alias/_cluster_name/}")
        done < <(awk -F '=' '$1 ~ /_cluster_name/ { print $1 }' "${HOME:?}"/.occ.conf 2> /dev/null)
        # aliases
        #
        if [[ "${aliases[*]}" ]]; then
          echo "${aliases[*]}"
          _exit 0
        else
          _exit 1 "is '${HOME:?}/.occ.conf' empty ???"
        fi
      else
        _exit 1 "'${HOME:?}/.occ.conf' was NOT found, exiting."
      fi
      ;;
    n)
      namespace="${OPTARG}"
      ;;
    r)
      if [ -f "${HOME:?}"/.occ.conf ]; then
        while read -r kubeconfig; do
          if [ -f "${kubeconfig}" ]; then
            echo "restoring [${kubeconfig}]..."
            _print_default_kubeconfig "${kubeconfig}"
          fi
        done < <(awk -F '=' '$1 ~ /_kubeconfig/ { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)
      fi
      echo "restoring [${HOME:?}/.kube/config]..."
      if [ -f "${HOME:?}"/.kube/config.default ]; then
        cp "${HOME:?}"/.kube/config.default "${HOME:?}"/.kube/config
      else
        _print_default_kubeconfig "${HOME:?}"/.kube/config
      fi
      _exit 0
      ;;
    t)
      token="${OPTARG}"
      ;;
    u)
      #
      # Notes:
      #   - https://github.com/lensapp/lens/issues/7826
      #
      if [ -f "${HOME:?}"/.occ.conf ]; then
        while read -r kubeconfig; do
          if [ -f "${kubeconfig}" ]; then
            ${sed} -i '/^current-context:/d' "${kubeconfig}"
          fi
        done < <(awk -F '=' '$1 ~ /_kubeconfig/ { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)
      fi
      ${sed} -i '/^current-context:/d' "${HOME:?}"/.kube/config
      _exit 0
      ;;
    H | U)
      _help 0
      ;;
    V)
      _exit 0 'v20240507'
      ;;
    ?)
      _help 1
      ;;
  esac
done
shift $((OPTIND - 1))

[ $# -ge 1 ] || _help 1

alias="${1:?}"

if [ -f "${HOME:?}"/.occ.conf ]; then
  # common variables
  #
  current_kind="$(awk -F '=' -v this="^${alias}_kind" '$1 ~ this { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)"
  current_kubeconfig="$(awk -F '=' -v this="^${alias}_kubeconfig" '$1 ~ this { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)"
  case "${current_kind:?}" in
    aks)
      # aks variables
      #
      current_aks_name="$(awk -F '=' -v this="^${alias}_aks_name" '$1 ~ this { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)"
      current_aks_resource_group="$(awk -F '=' -v this="^${alias}_aks_resource_group" '$1 ~ this { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)"
      current_aks_subscription="$(awk -F '=' -v this="^${alias}_aks_subscription" '$1 ~ this { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)"
      if [ "${AKS_GET_CLUSTER_ADMINISTRATOR_CREDENTIALS}" = 'true' ]; then
        # aks (set-cluster, set-context, set-credentials)
        #
        az aks get-credentials \
          --admin \
          --context "${current_aks_name:?}" \
          --file "${current_kubeconfig:?}" \
          --name "${current_aks_name:?}" \
          --overwrite-existing \
          --resource-group "${current_aks_resource_group:?}" \
          --subscription "${current_aks_subscription:?}" 1> /dev/null
        # aks (set-context)
        #
        oc config set-context \
          --kubeconfig="${current_kubeconfig:?}" \
          --namespace="${namespace:-default}" \
          "${current_aks_name:?}"-admin 1> /dev/null
        # aks (set-context)
        #
        # Notes:
        #   - workaround to docker desktop provided kubectl...
        #
        if [ -x "$(command -v kubectl)" ]; then
          kubectl config set-context \
            --kubeconfig="${current_kubeconfig:?}" \
            --namespace="${namespace:-default}" \
            "${current_aks_name:?}"-admin 1> /dev/null
        fi
        # aks (use-context)
        #
        oc config use-context \
          "${current_aks_name:?}"-admin
      else
        # aks (set-cluster, set-context, set-credentials)
        #
        az aks get-credentials \
          --context "${current_aks_name:?}" \
          --file "${current_kubeconfig:?}" \
          --name "${current_aks_name:?}" \
          --overwrite-existing \
          --resource-group "${current_aks_resource_group:?}" \
          --subscription "${current_aks_subscription:?}" 1> /dev/null
        # aks (set-context)
        #
        oc config set-context \
          --kubeconfig="${current_kubeconfig:?}" \
          --namespace="${namespace:-default}" \
          "${current_aks_name:?}" 1> /dev/null
        # aks (set-context)
        #
        # Notes:
        #   - workaround to docker desktop provided kubectl...
        #
        if [ -x "$(command -v kubectl)" ]; then
          kubectl config set-context \
            --kubeconfig="${current_kubeconfig:?}" \
            --namespace="${namespace:-default}" \
            "${current_aks_name:?}" 1> /dev/null
        fi
        # aks (use-context)
        #
        oc config use-context \
          "${current_aks_name:?}"
      fi
      ;;
    custom)
      # custom variables
      #
      current_cluster_api_url="$(awk -F '=' -v this="^${alias}_cluster_api_url" '$1 ~ this { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)"
      current_cluster_name="$(awk -F '=' -v this="^${alias}_cluster_name" '$1 ~ this { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)"
      current_user_name="$(awk -F '=' -v this="^${alias}_user_name" '$1 ~ this { print $2 }' "${HOME:?}"/.occ.conf 2> /dev/null)"
      # custom (set-cluster, set-context, set-credentials)
      #
      oc config set-cluster \
        --kubeconfig="${current_kubeconfig:?}" \
        --server="${current_cluster_api_url:?}" \
        "${current_cluster_name:?}" 1> /dev/null
      oc config set-context \
        --cluster="${current_cluster_name:?}" \
        --kubeconfig="${current_kubeconfig:?}" \
        --user="${current_user_name:?}-at-${current_cluster_name:?}" \
        "${current_cluster_name:?}-as-${current_user_name:?}" 1> /dev/null
      if [ -n "${token}" ]; then
        oc config set-credentials \
          --kubeconfig="${current_kubeconfig:?}" \
          --token="${token}" \
          "${current_user_name:?}-at-${current_cluster_name:?}" 1> /dev/null
      fi
      # custom (set-context)
      #
      oc config set-context \
        --kubeconfig="${current_kubeconfig:?}" \
        --namespace="${namespace:-default}" \
        "${current_cluster_name:?}-as-${current_user_name:?}" 1> /dev/null
      # custom (set-context)
      #
      # Notes:
      #   - workaround to docker desktop provided kubectl...
      #
      if [ -x "$(command -v kubectl)" ]; then
        kubectl config set-context \
          --kubeconfig="${current_kubeconfig:?}" \
          --namespace="${namespace:-default}" \
          "${current_cluster_name:?}-as-${current_user_name:?}" 1> /dev/null
      fi
      # custom (use-context)
      #
      oc config use-context \
        "${current_cluster_name:?}-as-${current_user_name:?}"
      ;;
    *)
      _exit 1 'Unsupported kind, exiting.'
      ;;
  esac
else
  _exit 1 "'${HOME:?}/.occ.conf' was NOT found, exiting."
fi
