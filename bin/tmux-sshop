#!/usr/bin/env bash
#
# bashsupport disable=BP5004
# bashsupport disable=BP5007

#######################################
# No description.
# Arguments:
#   1 - exit code (optional, integer)
# Outputs:
#   Help message to stdout.
#######################################
this::help() {
  local exit_code
  exit_code="${1:-1}"
  cat << EOT

  Usage: $(basename "${0}") [OPTION...] <ACCOUNT> <ARGS>

  Options:
    -d Debug
    -l List available accounts and exit
    -r Restore default account and exit

  Help options:
    -H Show this help message
    -U Display brief usage
    -V Print version

  Notes:
    - https://developer.1password.com/docs/ssh/agent/config
    - Set TMUX_SSH_SESSION_NAME environment variable to overwrite default value, defaults to '${TMUX_SSH_SESSION_NAME}'
    - Set TMUX_SSH_WINDOW_NAME environment variable to overwrite default value, defaults to '${TMUX_SSH_WINDOW_NAME}'

EOT
  functions::exit "${exit_code}"
}

#######################################
# No description.
# Globals:
#   HOME
#   SSH_AUTH_SOCK
#   getopts_debug
# Arguments:
#   1
#######################################
#
# bashsupport disable=BP2001
this::op() {
  local account
  account="${1:?}"
  if [ -f "${HOME:?}"/.config/1Password/ssh/agent.toml.default ]; then
    if [ "${account}" = 'default' ]; then
      cp "${HOME:?}"/.config/1Password/ssh/agent.toml.default "${HOME:?}"/.config/1Password/ssh/agent.toml
    else
      if [ -f "${HOME:?}"/.config/1Password/ssh/"${account}".toml ]; then
        cp "${HOME:?}"/.config/1Password/ssh/"${account}".toml "${HOME:?}"/.config/1Password/ssh/agent.toml
        if [ "${getopts_debug}" = 'true' ]; then
          if [ -n "${SSH_AUTH_SOCK}" ]; then
            :
          else
            if [ -S "${HOME:?}"/.1password/agent.sock ]; then
              # bashsupport disable=BP5006
              SSH_AUTH_SOCK="${HOME:?}"/.1password/agent.sock
              # bashsupport disable=BP5006
              export SSH_AUTH_SOCK
            elif [ -S "${HOME:?}"/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock ]; then
              # bashsupport disable=BP5006
              SSH_AUTH_SOCK="${HOME:?}"/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock
              # bashsupport disable=BP5006
              export SSH_AUTH_SOCK
            fi
          fi
          #
          # Notes:
          #   - man ssh-add
          #
          functions::stdout "listing fingerprints of all identities currently represented by the agent..."
          ssh-add -l
        fi
      else
        functions::exit 1 "'${HOME:?}/.config/1Password/ssh/${account}.toml' was NOT found, exiting."
      fi
    fi
  else
    functions::exit 1 "'${HOME:?}/.config/1Password/ssh/agent.toml.default' was NOT found, exiting."
  fi
}

#######################################
# No description.
# Globals:
#   TMUX_SSH_SESSION_NAME
#   TMUX_SSH_WINDOW_NAME
#   args[0]
# Arguments:
#  None
#######################################
this::tmux() {
  local arg
  local args
  local hosts
  arg=''
  # shellcheck disable=SC2206
  args=(${@})
  hosts=()
  if tmux has-session -t "${TMUX_SSH_SESSION_NAME}" 2> /dev/null; then
    functions::exit 1 "session name already exists, exiting."
  else
    tmux new-session -d -n "${TMUX_SSH_WINDOW_NAME}" -s "${TMUX_SSH_SESSION_NAME}" "ssh ${args[0]}"
  fi
  unset 'args[0]'
  for arg in "${args[@]}"; do
    hosts+=("${arg}")
    if [ "${#hosts[@]}" -le 2 ]; then
      tmux split-window -t :"${TMUX_SSH_WINDOW_NAME}" "ssh ${arg}"
      tmux select-layout even-vertical
    else
      tmux split-window -t :"${TMUX_SSH_WINDOW_NAME}" "ssh ${arg}"
      tmux select-layout tiled
    fi
    tmux select-pane -t :.+
    tmux set-window-option -t :"${TMUX_SSH_WINDOW_NAME}" synchronize-panes on
  done
  tmux select-window -t "${TMUX_SSH_SESSION_NAME}":"${TMUX_SSH_WINDOW_NAME}"
  tmux attach-session -t "${TMUX_SSH_SESSION_NAME}"
}

#######################################
# No description.
# Globals:
#   HOME
#   OPTIND
#   TMUX_SSH_SESSION_NAME
#   TMUX_SSH_WINDOW_NAME
#   getopts_debug
# Arguments:
#  None
#######################################
main() {
  if [ -f "$(dirname "${0}")"/../etc/bash44.shconf ]; then
    # shellcheck source=../etc/bash44.shconf
    . "$(dirname "${0}")"/../etc/bash44.shconf || exit 1
  else
    # shellcheck source=/dev/null
    . "${HOME:?}"/.etc/bash44.shconf || exit 1
  fi

  if [ -f "$(dirname "${0}")"/../etc/constants.shconf ]; then
    # shellcheck source=../etc/constants.shconf
    . "$(dirname "${0}")"/../etc/constants.shconf
  else
    # shellcheck source=/dev/null
    . "${HOME:?}"/.etc/constants.shconf
  fi

  if [ -f "$(dirname "${0}")"/../etc/functions.shconf ]; then
    # shellcheck source=../etc/functions.shconf
    . "$(dirname "${0}")"/../etc/functions.shconf
  else
    # shellcheck source=/dev/null
    . "${HOME:?}"/.etc/functions.shconf
  fi

  # bashsupport disable=BP5006
  TMUX_SSH_SESSION_NAME="${TMUX_SSH_SESSION_NAME:-default}"
  # bashsupport disable=BP5006
  TMUX_SSH_WINDOW_NAME="${TMUX_SSH_WINDOW_NAME:-default}"
  getopts_debug='false'

  local getopts_account_file_name
  local getopts_account_file_path
  local getopts_accounts
  local getopts_args
  local getopts_version
  getopts_account_file_name=''
  getopts_account_file_path=''
  getopts_accounts=()
  getopts_args=''
  getopts_version='v20240819'

  trap 'functions::catch_all ${?}' ERR SIGHUP SIGINT SIGQUIT SIGTERM

  OPTIND=1
  while getopts 'dlrHUV' getopts_args; do
    case "${getopts_args}" in
      d)
        getopts_debug='true'
        ;;
      l)
        if [ -d "${HOME:?}"/.config/1Password/ssh ]; then
          for getopts_account_file_path in "${HOME:?}"/.config/1Password/ssh/*.toml; do
            getopts_account_file_name="$(basename -- "${getopts_account_file_path}")"
            if [ "${getopts_account_file_name}" = 'agent.toml' ]; then
              :
            else
              getopts_accounts+=("${getopts_account_file_name%.toml}")
            fi
          done
          if [[ "${getopts_accounts[*]}" ]]; then
            functions::stdout "${getopts_accounts[*]}"
            functions::exit 0
          else
            functions::exit 1 "is '${HOME:?}/.config/1Password/ssh' empty ???"
          fi
        else
          functions::exit 1 "'${HOME:?}/.config/1Password/ssh' was NOT found, exiting."
        fi
        ;;
      r)
        functions::stdout 'restoring default account...'
        this::op default
        functions::exit 0
        ;;
      H | U)
        this::help 0
        ;;
      V)
        functions::exit 0 "${getopts_version}"
        ;;
      ?)
        this::help 1
        ;;
    esac
  done
  shift $((OPTIND - 1))

  [ $# -ge 2 ] || this::help 1

  this::op "${1}"

  this::tmux "${@:2}"

  this::op default
}

# bashsupport disable=BP5001
if [[ ${BASH_SOURCE[0]} == "${0}" ]]; then
  main "${@}"
fi
